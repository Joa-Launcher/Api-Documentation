---
import {Icon} from 'astro-icon'
import {apiMethod, apiType, externType} from '../../../public/types'

const {method}: { method: apiMethod } = Astro.props;


---
{
    function GetTypeName(type: apiType | externType){
        if(type.genericParameters.length == 0)
            return <a></a>
        }
}
<div class="w-full flex flex-col bg-[color:var(--theme-bg-accent)] rounded-[8px]">
    <div class="flex justify-between w-full p-[20px] cursor-pointer" id="dropDownButton">
        <p class="text-base text-[1.2rem] font-bold">{method.signature}</p>
        <div class="h-10 w-10 ">
            <div id="dropDownIcon" class="w-full h-full">
                <Icon name="mdi:chevron-down"/>
            </div>
            <div id="dropUpIcon" class="hidden w-full h-full">
                <Icon name="mdi:chevron-up"/>
            </div>
        </div>
    </div>
    <div id="dropDown" class="hidden p-[20px] pt-0">
        <p>{method.description}</p>
        {method.parameters.length != 0 && <p class="font-bold mt-3">Parameters</p>
                <table>
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                    </tr>
                    {method.parameters.map(p =>
                            <tr>
                                <td> <a href={p.type.url}>{p.type.name}</a> {p.name}</td>
                                <td>{p.description}</td>
                            </tr>
                    )}
                    </thead>
                </table>
        }
        {method.returns &&
                <p class="font-bold mt-3">Returns</p>
                <table>
                    <thead>
                    <tr>
                        <th>Type</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>{method.returns.type.name}</td>
                        <td>{method.returns.description}</td>
                    </tr>
                    </thead>
                </table>
        }
        {method.exceptions.length != 0 && <p class="font-bold mt-3">Exceptions</p>
                <table>
                    <thead>
                    <tr>
                        <th>Type</th>
                        <th>Description</th>
                    </tr>
                    {method.exceptions.map(e =>
                            <tr>
                                <td>{e.type.name}</td>
                                <td>{e.description}</td>
                            </tr>
                    )}
                    </thead>
                </table>
        }
    </div>
</div>

<script>
    const elm = document.querySelectorAll < HTMLElement > ("#dropDownButton");
    const elements = Array.from(elm).map((x) => {
        return {
            button: x,
            isExpanded: false,
        };
    });

    elements.forEach((element) => {
        element.button.addEventListener("click", () => {
            element.isExpanded = !element.isExpanded;
            let dropdown =
                element.button.parentElement?.querySelector < HTMLElement > ("#dropDown");
            let dropDownIcon = element.button.querySelector < HTMLElement > ("#dropDownIcon");
            let dropUpIcon = element.button.querySelector < HTMLElement > ("#dropUpIcon");

            if (!dropdown) throw "dropdown not found";
            if (!dropDownIcon) throw "dropDownIcon not found";
            if (!dropUpIcon) throw "dropUpIcon not found";

            dropdown.style.display = element.isExpanded ? "Block" : "None";
            dropDownIcon.style.display = element.isExpanded ? "None" : "Block";
            dropUpIcon.style.display = element.isExpanded ? "Block" : "None";
        });
    });
</script>
